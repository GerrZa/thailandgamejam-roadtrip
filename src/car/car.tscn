[gd_scene load_steps=15 format=3 uid="uid://cvdjeuqi55t5a"]

[ext_resource type="Texture2D" uid="uid://wf26b7xbyu5f" path="res://asset/car/car_slice.png" id="1_iox4k"]
[ext_resource type="Texture2D" uid="uid://ixgn5gtkhr8q" path="res://icon.svg" id="3_ikygv"]
[ext_resource type="Shader" uid="uid://djffngelxs6pn" path="res://src/shader/circle_sprite.gdshader" id="3_tf5ac"]

[sub_resource type="GDScript" id="GDScript_tmscv"]
script/source = "extends Node2D

var car_slice_text = preload(\"res://asset/car/car_slice.png\")

var x_input = 0.0

var speed = 0.0
var apply_speed = 0.0
var acc = 9.0
var move_toward_speed = 30.0
const MAX_SPEED = 350.0

@export var main_speed = 40;

var debug_x_pos = 0.0

var press_delta = 0.0
var press_dir = \"none\"
var MAX_PRESS_DELTA = 0.15

var DEF_DASH_CD = 1.2
var dash_cd = 0.0
var dash_duration = 0.0
const DEF_DASH_DURATION = 0.2

var dash_speed = 0.0
const DEF_DASH_SPEED = 550.0

var car_pos = Vector2.ZERO
var car_pos_vel = Vector2.ZERO

var hp = 3

var invin = false

@export var left_wall = 64.0
@export var right_wall = 480-64.0

func _ready() -> void:
	#init sprite
	for i in range(13):
		var new_slice = Sprite2D.new()
		$SubViewport/car_slice.add_child(new_slice)
		
		new_slice.position.y = -i 
		new_slice.centered = true
		new_slice.texture = car_slice_text
		new_slice.hframes = 13
		new_slice.flip_v = true
		new_slice.frame = i
	
	$soft_hit.connect(\"area_entered\", func(area): hurt(1))
	$hard_hit.connect(\"area_entered\", func(area): hurt(3))

func _physics_process(delta: float) -> void:
	
	if Input.is_action_just_pressed(\"ui_down\"):
		hurt(1)
	
	#car render
	car_pos += car_pos_vel * delta
	if car_pos.y < 0.0:
		car_pos_vel.y += 160 * delta
	
	$modulate_control/car_render.position = car_pos
	car_pos.y = clamp(car_pos.y, -INF, 0.0)
	
	$modulate_control/car_render.scale = lerp($modulate_control/car_render.scale, Vector2(1,1), 0.1)
	$modulate_control/car_render.material.set_shader_parameter(\"progress\", clamp(dash_cd/DEF_DASH_CD, 0.0, 1.0))
	
	#acceleration
	if Input.is_action_just_pressed(\"ui_up\"):
		main_speed += 20
		DEF_DASH_CD *= 0.9
		acc += 0.75
		$modulate_control/car_render.scale = Vector2(0.8, 1.2)
	
	#dash
	if Input.is_action_just_pressed(\"ui_right\"):
		if press_dir == \"right\" and press_delta > 0.0 and dash_cd < 0.0:
			press_delta = 0.0
			dash_cd = DEF_DASH_CD
			dash()
		
		press_dir = \"right\"
		press_delta = MAX_PRESS_DELTA
	elif Input.is_action_just_pressed(\"ui_left\"):
		if press_dir == \"left\" and press_delta > 0.0 and dash_cd < 0.0:
			press_delta = 0.0
			dash_cd = DEF_DASH_CD
			dash()
			
		press_dir = \"left\"
		press_delta = MAX_PRESS_DELTA
	
	press_delta -= delta
	dash_cd -= delta
	
	#moving input
	x_input = Input.get_axis(\"ui_left\", \"ui_right\")
	speed += x_input * acc
	
	dash_speed = lerp(dash_speed, 0.0, 0.1)
	
	speed = clamp(speed, -MAX_SPEED, MAX_SPEED)
	if dash_duration > 0.0:
		apply_speed = lerp(apply_speed, speed, 0.1)
	else:
		apply_speed = speed
	position.x += apply_speed * delta
	
	if x_input == 0:
		speed = lerp(speed, 0.0, 0.0125 + (0.025 * abs(speed) / MAX_SPEED))
	
	dash_duration -= delta
	
	#print(\"apply speed: %3.3f | speed: %3.3f\" % [apply_speed, speed])
	print(position.x - debug_x_pos)
	debug_x_pos = position.x
	
	#wall detect
	if position.x <= left_wall and apply_speed < 0.0:
		hurt(1)
		speed = MAX_SPEED / 3
	elif position.x >= right_wall and apply_speed >= 0.0:
		hurt(1)
		speed = -MAX_SPEED / 3
	
	position.x = clamp(position.x, left_wall, right_wall)
	
	#rotate car
	for s in $SubViewport/car_slice.get_children():
		s.rotation_degrees = lerp(s.rotation_degrees, (90 * 0.75) * (apply_speed / MAX_SPEED), 0.4)

func dash():
	$modulate_control/car_render.scale = Vector2(1.4,0.8)
	
	match press_dir:
		\"right\":
			speed = abs(speed)
			apply_speed = DEF_DASH_SPEED
			dash_duration = DEF_DASH_DURATION
		\"left\":
			speed = -abs(speed)
			apply_speed = -DEF_DASH_SPEED
			dash_duration = DEF_DASH_DURATION
	press_dir = \"none\"



func hurt(damage):
	print(\"hurt\")
	
	if invin == false:
		hp -= damage
		
		if hp <= 0:
			dead()
			print(\"ded\")
			return
		
		invin = true
		$modulate_control/car_render/AnimationPlayer.play(\"blink\")
		await $modulate_control/car_render/AnimationPlayer.animation_finished
		invin = false

func dead():
	var ded_part = load(\"res://src/particle/explosion_part.tscn\")
	var part_ins = ded_part.instantiate()
	
	get_tree().current_scene.add_child(part_ins)
	part_ins.global_position = global_position
	
	queue_free()
"

[sub_resource type="GDScript" id="GDScript_xlk8c"]
script/source = "extends Sprite2D


func _ready() -> void:
	queue_free()
"

[sub_resource type="Shader" id="Shader_ikygv"]
code = "shader_type canvas_item;

uniform float width;
uniform float height;

uniform float progress : hint_range(0.0, 1.0, 0.1) = 1.0;
uniform float redIntense : hint_range(0.0, 1.0, 0.1) = 0.0;

uniform vec4 outlineColor : source_color;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	float pixelSizeX = 1.0 / width;
	float pixelSizeY = 1.0 / height;

	if (COLOR.a > 0.0 && UV.y >= 1.0 - progress){
		COLOR = mix(COLOR, vec4(1,1,1,0.3), 0.2 + (0.5 * progress));
	}

	COLOR = mix(COLOR, vec4(1,0.25,0.25,COLOR.a), 0.5 * redIntense);

	if (texture(TEXTURE, UV + vec2(pixelSizeX, 0.0)).a > 0.0 || texture(TEXTURE, UV + vec2(-pixelSizeX, 0.0)).a > 0.0 ||texture(TEXTURE, UV + vec2(0.0, pixelSizeY)).a > 0.0 ||texture(TEXTURE, UV + vec2(0.0, -pixelSizeY)).a > 0.0){
		float newAlpha = max(max(texture(TEXTURE, UV + vec2(pixelSizeX, 0.0)).a, texture(TEXTURE, UV + vec2(-pixelSizeX, 0.0)).a), max(texture(TEXTURE, UV + vec2(0.0, pixelSizeY)).a, texture(TEXTURE, UV + vec2(0.0, -pixelSizeY)).a));

		if (COLOR.a == 0.0){
			COLOR = vec4(outlineColor.r, outlineColor.g, outlineColor.b, newAlpha);
		}
	}
}

//void light() {
//	// Called for every pixel for every light affecting the CanvasItem.
//	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ikygv"]
shader = SubResource("Shader_ikygv")
shader_parameter/width = 48.0
shader_parameter/height = 48.0
shader_parameter/progress = 1.0
shader_parameter/redIntense = 0.0
shader_parameter/outlineColor = Color(0, 0, 0, 1)

[sub_resource type="ViewportTexture" id="ViewportTexture_tmscv"]
viewport_path = NodePath("SubViewport")

[sub_resource type="Animation" id="Animation_tf5ac"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("modulate_control:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}

[sub_resource type="Animation" id="Animation_ikygv"]
resource_name = "blink"
length = 2.0
step = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("modulate_control:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Color(1, 1, 1, 1), Color(1, 1, 1, 0), Color(1, 1, 1, 1), Color(1, 1, 1, 0), Color(1, 1, 1, 1), Color(1, 1, 1, 0), Color(1, 1, 1, 1), Color(1, 1, 1, 0), Color(1, 1, 1, 1), Color(1, 1, 1, 0), Color(1, 1, 1, 1)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_tf5ac"]
_data = {
&"RESET": SubResource("Animation_tf5ac"),
&"blink": SubResource("Animation_ikygv")
}

[sub_resource type="ShaderMaterial" id="ShaderMaterial_k527v"]
shader = ExtResource("3_tf5ac")

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_tf5ac"]
radius = 6.0
height = 24.0

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_k527v"]
radius = 5.0
height = 16.0

[node name="Car" type="Node2D"]
script = SubResource("GDScript_tmscv")

[node name="car_preview" type="Sprite2D" parent="."]
texture = ExtResource("1_iox4k")
hframes = 13
frame = 4
script = SubResource("GDScript_xlk8c")

[node name="SubViewport" type="SubViewport" parent="."]
transparent_bg = true
canvas_item_default_texture_filter = 0
size = Vector2i(48, 48)

[node name="Camera2D" type="Camera2D" parent="SubViewport"]
offset = Vector2(0, -4)

[node name="car_slice" type="Node2D" parent="SubViewport"]

[node name="modulate_control" type="Node2D" parent="."]

[node name="car_render" type="Sprite2D" parent="modulate_control"]
material = SubResource("ShaderMaterial_ikygv")
scale = Vector2(1.00275, 1)
texture = SubResource("ViewportTexture_tmscv")

[node name="AnimationPlayer" type="AnimationPlayer" parent="modulate_control/car_render"]
root_node = NodePath("../../..")
libraries = {
&"": SubResource("AnimationLibrary_tf5ac")
}

[node name="car_shadow" type="Sprite2D" parent="."]
modulate = Color(0, 0, 0, 0.219608)
z_index = -1
material = SubResource("ShaderMaterial_k527v")
position = Vector2(0, 2)
scale = Vector2(0.171875, 0.257813)
texture = ExtResource("3_ikygv")

[node name="soft_hit" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="soft_hit"]
shape = SubResource("CapsuleShape2D_tf5ac")

[node name="hard_hit" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="hard_hit"]
shape = SubResource("CapsuleShape2D_k527v")
debug_color = Color(0.921815, 0.169969, 0.553005, 0.42)
